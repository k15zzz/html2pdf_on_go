// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
  "swagger": "2.0",
  "info": {
    "description": "Преобразует HTML в PDF",
    "title": "HTML to PDF",
    "contact": {
      "name": "Koptev Danil",
      "url": "https://github.com/k15zzz",
      "email": "koptevdeveloper@gmail.com"
    },
    "version": "1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/converts/html-to-pdf": {
      "post": {
        "description": "Конвертирует html в pdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Converts"
        ],
        "summary": "Получить pdf",
        "parameters": [
          {
            "type": "string",
            "format": "content",
            "description": "Конвертируемый HTML",
            "name": "content",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PDF"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpErrors.RestError"
            }
          }
        }
      }
    },
    "/converts/url-to-pdf": {
      "post": {
        "description": "Конвертирует url в pdf",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Converts"
        ],
        "summary": "Получить pdf",
        "parameters": [
          {
            "type": "string",
            "format": "link",
            "description": "Конвертируемый URL",
            "name": "link",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PDF"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/httpErrors.RestError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "httpErrors.RestErr": {
      "type": "object"
    },
    "httpErrors.RestError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "status": {
          "type": "integer"
        }
      }
    },
    "models.HTML": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },
    "models.URL": {
      "type": "object",
      "required": [
        "link"
      ],
      "properties": {
        "link": {
          "type": "string"
        }
      }
    },
    "models.PDF": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "type": "string"
        }
      }
    }
  }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Go Example REST API",
	Description: "Example Golang REST API",
}

type swaggo struct{}

func (s *swaggo) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &swaggo{})
}
